import matplotlib.pyplot as plt
import numpy as np


#a = np.load("eu.npy")
# b =np.load("eu_polar.npy")
# c =np.load("eu_haversine.npy")
# #plt.plot(a,label="Cartesian Coordinates")
# plt.plot(b,label='Spherical Coordinates (Euclidean)')
# plt.plot(c,label='Spherical Coordinates (Haversine)')
# plt.xlabel("Iterations")
# plt.ylabel("Objective")
# plt.title("Mirror Descent Method [dim=50, r=10]")
# plt.legend()
# plt.savefig("converge_md.png")

# plt.figure()

# a = np.load("norms_eu.npy")
# plt.plot(a,label=f"Cartesian Coordinates (Final Value={a[-1]})")
# plt.xlabel("Iterations")
# plt.ylabel("Norm")
# plt.ylim([-2, 2])
# plt.title("Projected Gradient Method [dim=50, r=10]")
# plt.legend()
# plt.savefig("norm_eu.png")

# plt.figure()

# a = np.load("norms_polar.npy")
# plt.plot(a,label=f"Spherical Coordinates (Final Value={a[-1]})")
# plt.xlabel("Iterations")
# plt.ylabel("Norm")
# plt.ylim([-2, 2])
# plt.title("Mirror Descent Method [dim=50, r=10]")
# plt.legend()
# plt.savefig("norm_polar.png")
# plt.figure()

# a = np.load("norms_haversine.npy")
# plt.plot(a,label=f"Haversine (Final Value={a[-1]})")
# plt.xlabel("Iterations")
# plt.ylabel("Norm")
# plt.ylim([-2, 2])
# plt.title("Mirror Descent Method [dim=50, r=10]")
# plt.legend()
# plt.savefig("norm_haversine.png")

# a = np.load("cgm_eu.npy")
# b =np.load("cgm_polar.npy")
# plt.plot(a,label="Cartesian Coordinates")
# plt.plot(b,label='Spherical Coordinates')
# plt.xlabel("Iterations")
# plt.ylabel("Objective")
# plt.title("Conditional Gradient Method [dim=50, r=10]")
# plt.legend()
# plt.savefig("converge_cgm.png")

# plt.figure()

# a = np.load("cgm_eu_norms.npy")
# plt.plot(a,label=f"Cartesian Coordinates (Final Value={a[-1]})")
# plt.xlabel("Iterations")
# plt.ylabel("Norm")
# plt.ylim([-2, 2])
# plt.title("Conditional Gradient Method [dim=50, r=10]")
# plt.legend()
# plt.savefig("norm_eu_cgm.png")

# plt.figure()

# a = np.load("cgm_polar_norm.npy")
# plt.plot(a,label=f"Spherical Coordinates (Final Value={a[-1]})")
# plt.xlabel("Iterations")
# plt.ylabel("Norm")
# plt.ylim([-2, 2])
# plt.title("Conditional Gradient Method [dim=50, r=10]")
# plt.legend()
# plt.savefig("norm_polar_cgm.png")

# # a = np.load("eu_pgm.npy")
# b =np.load("eu_polar_pgm.npy")
# # plt.plot(a[:100],label="Cartesian Coordinates")
# plt.plot(b,label='Spherical Coordinates')
# plt.xlabel("Iterations")
# plt.ylabel("Objective")
# plt.title("Proximal Gradient Method [dim=50, r=10]")
# plt.legend()
# plt.savefig("converge_pgm.png")

# plt.figure()

# a = np.load("cgm_eu_norms.npy")
# plt.plot(a,label=f"Cartesian Coordinates (Final Value={a[-1]})")
# plt.xlabel("Iterations")
# plt.ylabel("Norm")
# plt.ylim([-2, 2])
# plt.title("Conditional Gradient Method [dim=50, r=10]")
# plt.legend()
# plt.savefig("norm_eu_cgm.png")

# a = np.load("norms_polar_pgm.npy")
# plt.plot(a,label=f"Cartesian Coordinates (Final Value={a[-1]})")
# plt.xlabel("Iterations")
# plt.ylabel("Norm")
# plt.ylim([-2, 2])
# plt.title("Proximal Gradient Method [dim=50, r=10]")
# plt.legend()
# plt.savefig("norms_polar_pgm.png")

plt.figure()
a = np.load("norms_eu_pgm.npy")
plt.plot(a,label=f"Spherical Coordinates (Final Value={a[-1]})")
plt.xlabel("Iterations")
plt.ylabel("Norm")
plt.ylim([-2, 2])
plt.title("Proximal Gradient Method [dim=50, r=10]")
plt.legend()
plt.savefig("norm_polar_pgm.png")